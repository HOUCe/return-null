import { PureComponent } from 'react';
import PropTypes from 'prop-types';


class Speak extends PureComponent {
  static propTypes = {
    language: PropTypes.string,
    children: PropTypes.string.isRequired,
  }

  static defaultProps = {
    language: 'en',
  }

  constructor(props) {
    super(props);

    this.utterance = new window.SpeechSynthesisUtterance();

    this.updateUtterance(props);

    // When the browser loads, it doesn't automatically try
    // to figure out which voices are available. We need to
    // create an utterance for it to check, and this is an
    // asynchronous process.
    // So we need to register a callback.
    // Real life is messy.
    window.speechSynthesis.onvoiceschanged = () => (
      this.forceUpdate()
    );
  }

  componentWillUpdate(nextProps) {
    window.speechSynthesis.cancel();

    this.updateUtterance(nextProps);
  }

  componentWillUnmount() {
    window.speechSynthesis.cancel();
  }

  updateUtterance(props) {
    this.utterance.voice = window.speechSynthesis
      .getVoices()
      .find(voice => (
        voice.lang === props.language
      ));

    this.utterance.text = props.children;
  }

  render() {
    window.speechSynthesis.speak(this.utterance);

    return null;
  }
}

export default Speak;
